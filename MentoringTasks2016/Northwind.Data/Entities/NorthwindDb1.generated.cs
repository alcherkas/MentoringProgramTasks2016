//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/t4models).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;

using LinqToDB;
using LinqToDB.Common;
using LinqToDB.Data;
using LinqToDB.DataProvider.SqlServer;
using LinqToDB.Mapping;

namespace DataModels
{
    /// <summary>
    /// Database       : Northwind
    /// Data Source    : localhost
    /// Server Version : 12.00.4213
    /// </summary>
    public partial class NorthwindDB : DataConnection
    {
        public ITable<AlphabeticalListOfProduct> AlphabeticalListOfProducts { get { return this.GetTable<AlphabeticalListOfProduct>(); } }
        public ITable<Category> Categories { get { return this.GetTable<Category>(); } }
        public ITable<CategorySalesFor1997> CategorySalesFor1997 { get { return this.GetTable<CategorySalesFor1997>(); } }
        public ITable<CurrentProductList> CurrentProductLists { get { return this.GetTable<CurrentProductList>(); } }
        public ITable<Customer> Customers { get { return this.GetTable<Customer>(); } }
        public ITable<CustomerAndSuppliersByCity> CustomerAndSuppliersByCities { get { return this.GetTable<CustomerAndSuppliersByCity>(); } }
        public ITable<CustomerCustomerDemo> CustomerCustomerDemoes { get { return this.GetTable<CustomerCustomerDemo>(); } }
        public ITable<CustomerDemographic> CustomerDemographics { get { return this.GetTable<CustomerDemographic>(); } }
        public ITable<Employee> Employees { get { return this.GetTable<Employee>(); } }
        public ITable<EmployeeTerritory> EmployeeTerritories { get { return this.GetTable<EmployeeTerritory>(); } }
        public ITable<Invoice> Invoices { get { return this.GetTable<Invoice>(); } }
        public ITable<Order> Orders { get { return this.GetTable<Order>(); } }
        public ITable<OrderDetail> OrderDetails { get { return this.GetTable<OrderDetail>(); } }
        public ITable<OrderDetailsExtended> OrderDetailsExtendeds { get { return this.GetTable<OrderDetailsExtended>(); } }
        public ITable<OrdersQry> OrdersQries { get { return this.GetTable<OrdersQry>(); } }
        public ITable<OrderSubtotal> OrderSubtotals { get { return this.GetTable<OrderSubtotal>(); } }
        public ITable<Product> Products { get { return this.GetTable<Product>(); } }
        public ITable<ProductsAboveAveragePrice> ProductsAboveAveragePrices { get { return this.GetTable<ProductsAboveAveragePrice>(); } }
        public ITable<ProductSalesFor1997> ProductSalesFor1997 { get { return this.GetTable<ProductSalesFor1997>(); } }
        public ITable<ProductsByCategory> ProductsByCategories { get { return this.GetTable<ProductsByCategory>(); } }
        public ITable<QuarterlyOrder> QuarterlyOrders { get { return this.GetTable<QuarterlyOrder>(); } }
        public ITable<Region> Regions { get { return this.GetTable<Region>(); } }
        public ITable<SalesByCategory> SalesByCategories { get { return this.GetTable<SalesByCategory>(); } }
        public ITable<SalesTotalsByAmount> SalesTotalsByAmounts { get { return this.GetTable<SalesTotalsByAmount>(); } }
        public ITable<Shipper> Shippers { get { return this.GetTable<Shipper>(); } }
        public ITable<SummaryOfSalesByQuarter> SummaryOfSalesByQuarters { get { return this.GetTable<SummaryOfSalesByQuarter>(); } }
        public ITable<SummaryOfSalesByYear> SummaryOfSalesByYears { get { return this.GetTable<SummaryOfSalesByYear>(); } }
        public ITable<Supplier> Suppliers { get { return this.GetTable<Supplier>(); } }
        public ITable<Territory> Territories { get { return this.GetTable<Territory>(); } }

        public NorthwindDB()
        {
            InitDataContext();
        }

        public NorthwindDB(string configuration)
            : base(configuration)
        {
            InitDataContext();
        }

        partial void InitDataContext();

        #region FreeTextTable

        public class FreeTextKey<T>
        {
            public T Key;
            public int Rank;
        }

        [FreeTextTableExpression]
        public ITable<FreeTextKey<TKey>> FreeTextTable<TTable, TKey>(string field, string text)
        {
            return this.GetTable<FreeTextKey<TKey>>(
                this,
                ((MethodInfo)(MethodBase.GetCurrentMethod())).MakeGenericMethod(typeof(TTable), typeof(TKey)),
                field,
                text);
        }

        [FreeTextTableExpression]
        public ITable<FreeTextKey<TKey>> FreeTextTable<TTable, TKey>(Expression<Func<TTable, string>> fieldSelector, string text)
        {
            return this.GetTable<FreeTextKey<TKey>>(
                this,
                ((MethodInfo)(MethodBase.GetCurrentMethod())).MakeGenericMethod(typeof(TTable), typeof(TKey)),
                fieldSelector,
                text);
        }

        #endregion
    }

    // View

    // View

    // View
    [Table(Schema = "dbo", Name = "Current Product List")]
    public partial class CurrentProductList
    {
        [Identity]
        public int ProductID { get; set; } // int
        [Column, NotNull]
        public string ProductName { get; set; } // nvarchar(40)
    }

    [Table(Schema = "dbo", Name = "Customers")]
    public partial class Customer
    {
        [PrimaryKey, NotNull]
        public string CustomerID { get; set; } // nchar(5)
        [Column, NotNull]
        public string CompanyName { get; set; } // nvarchar(40)
        [Column, Nullable]
        public string ContactName { get; set; } // nvarchar(30)
        [Column, Nullable]
        public string ContactTitle { get; set; } // nvarchar(30)
        [Column, Nullable]
        public string Address { get; set; } // nvarchar(60)
        [Column, Nullable]
        public string City { get; set; } // nvarchar(15)
        [Column, Nullable]
        public string Region { get; set; } // nvarchar(15)
        [Column, Nullable]
        public string PostalCode { get; set; } // nvarchar(10)
        [Column, Nullable]
        public string Country { get; set; } // nvarchar(15)
        [Column, Nullable]
        public string Phone { get; set; } // nvarchar(24)
        [Column, Nullable]
        public string Fax { get; set; } // nvarchar(24)

        #region Associations

        /// <summary>
        /// FK_Orders_Customers_BackReference
        /// </summary>
        [Association(ThisKey = "CustomerID", OtherKey = "CustomerID", CanBeNull = true, IsBackReference = true)]
        public IEnumerable<Order> Orders { get; set; }

        /// <summary>
        /// FK_CustomerCustomerDemo_Customers_BackReference
        /// </summary>
        [Association(ThisKey = "CustomerID", OtherKey = "CustomerID", CanBeNull = true, IsBackReference = true)]
        public IEnumerable<CustomerCustomerDemo> CustomerCustomerDemoes { get; set; }

        #endregion
    }

    // View
    [Table(Schema = "dbo", Name = "Customer and Suppliers by City")]
    public partial class CustomerAndSuppliersByCity
    {
        [Column, Nullable]
        public string City { get; set; } // nvarchar(15)
        [Column, NotNull]
        public string CompanyName { get; set; } // nvarchar(40)
        [Column, Nullable]
        public string ContactName { get; set; } // nvarchar(30)
        [Column, NotNull]
        public string Relationship { get; set; } // varchar(9)
    }

    // View

    // View
    [Table(Schema = "dbo", Name = "Order Details Extended")]
    public partial class OrderDetailsExtended
    {
        [Column, NotNull]
        public int OrderID { get; set; } // int
        [Column, NotNull]
        public int ProductID { get; set; } // int
        [Column, NotNull]
        public string ProductName { get; set; } // nvarchar(40)
        [Column, NotNull]
        public decimal UnitPrice { get; set; } // money
        [Column, NotNull]
        public short Quantity { get; set; } // smallint
        [Column, NotNull]
        public float Discount { get; set; } // real
        [Column, Nullable]
        public decimal? ExtendedPrice { get; set; } // money
    }

    // View
    [Table(Schema = "dbo", Name = "Orders Qry")]
    public partial class OrdersQry
    {
        [Column, NotNull]
        public int OrderID { get; set; } // int
        [Column, Nullable]
        public string CustomerID { get; set; } // nchar(5)
        [Column, Nullable]
        public int? EmployeeID { get; set; } // int
        [Column, Nullable]
        public DateTime? OrderDate { get; set; } // datetime
        [Column, Nullable]
        public DateTime? RequiredDate { get; set; } // datetime
        [Column, Nullable]
        public DateTime? ShippedDate { get; set; } // datetime
        [Column, Nullable]
        public int? ShipVia { get; set; } // int
        [Column, Nullable]
        public decimal? Freight { get; set; } // money
        [Column, Nullable]
        public string ShipName { get; set; } // nvarchar(40)
        [Column, Nullable]
        public string ShipAddress { get; set; } // nvarchar(60)
        [Column, Nullable]
        public string ShipCity { get; set; } // nvarchar(15)
        [Column, Nullable]
        public string ShipRegion { get; set; } // nvarchar(15)
        [Column, Nullable]
        public string ShipPostalCode { get; set; } // nvarchar(10)
        [Column, Nullable]
        public string ShipCountry { get; set; } // nvarchar(15)
        [Column, NotNull]
        public string CompanyName { get; set; } // nvarchar(40)
        [Column, Nullable]
        public string Address { get; set; } // nvarchar(60)
        [Column, Nullable]
        public string City { get; set; } // nvarchar(15)
        [Column, Nullable]
        public string Region { get; set; } // nvarchar(15)
        [Column, Nullable]
        public string PostalCode { get; set; } // nvarchar(10)
        [Column, Nullable]
        public string Country { get; set; } // nvarchar(15)
    }

    // View
    [Table(Schema = "dbo", Name = "Order Subtotals")]
    public partial class OrderSubtotal
    {
        [Column, NotNull]
        public int OrderID { get; set; } // int
        [Column, Nullable]
        public decimal? Subtotal { get; set; } // money
    }

    [Table(Schema = "dbo", Name = "Products")]
    public partial class Product
    {
        [PrimaryKey, Identity]
        public int ProductID { get; set; } // int
        [Column, NotNull]
        public string ProductName { get; set; } // nvarchar(40)
        [Column, Nullable]
        public int? SupplierID { get; set; } // int
        [Column, Nullable]
        public int? CategoryID { get; set; } // int
        [Column, Nullable]
        public string QuantityPerUnit { get; set; } // nvarchar(20)
        [Column, Nullable]
        public decimal? UnitPrice { get; set; } // money
        [Column, Nullable]
        public short? UnitsInStock { get; set; } // smallint
        [Column, Nullable]
        public short? UnitsOnOrder { get; set; } // smallint
        [Column, Nullable]
        public short? ReorderLevel { get; set; } // smallint
        [Column, NotNull]
        public bool Discontinued { get; set; } // bit

        #region Associations

        /// <summary>
        /// FK_Products_Categories
        /// </summary>
        [Association(ThisKey = "CategoryID", OtherKey = "CategoryID", CanBeNull = true, KeyName = "FK_Products_Categories", BackReferenceName = "Products")]
        public Category Category { get; set; }

        /// <summary>
        /// FK_Products_Suppliers
        /// </summary>
        [Association(ThisKey = "SupplierID", OtherKey = "SupplierID", CanBeNull = true, KeyName = "FK_Products_Suppliers", BackReferenceName = "Products")]
        public Supplier Supplier { get; set; }

        /// <summary>
        /// FK_Order_Details_Products_BackReference
        /// </summary>
        [Association(ThisKey = "ProductID", OtherKey = "ProductID", CanBeNull = true, IsBackReference = true)]
        public IEnumerable<OrderDetail> OrderDetails { get; set; }

        #endregion
    }

    // View
    [Table(Schema = "dbo", Name = "Products Above Average Price")]
    public partial class ProductsAboveAveragePrice
    {
        [Column, NotNull]
        public string ProductName { get; set; } // nvarchar(40)
        [Column, Nullable]
        public decimal? UnitPrice { get; set; } // money
    }

    // View
    [Table(Schema = "dbo", Name = "Product Sales for 1997")]
    public partial class ProductSalesFor1997
    {
        [Column, NotNull]
        public string CategoryName { get; set; } // nvarchar(15)
        [Column, NotNull]
        public string ProductName { get; set; } // nvarchar(40)
        [Column, Nullable]
        public decimal? ProductSales { get; set; } // money
    }

    // View
    [Table(Schema = "dbo", Name = "Products by Category")]
    public partial class ProductsByCategory
    {
        [Column, NotNull]
        public string CategoryName { get; set; } // nvarchar(15)
        [Column, NotNull]
        public string ProductName { get; set; } // nvarchar(40)
        [Column, Nullable]
        public string QuantityPerUnit { get; set; } // nvarchar(20)
        [Column, Nullable]
        public short? UnitsInStock { get; set; } // smallint
        [Column, NotNull]
        public bool Discontinued { get; set; } // bit
    }

    // View
    [Table(Schema = "dbo", Name = "Quarterly Orders")]
    public partial class QuarterlyOrder
    {
        [Column, Nullable]
        public string CustomerID { get; set; } // nchar(5)
        [Column, Nullable]
        public string CompanyName { get; set; } // nvarchar(40)
        [Column, Nullable]
        public string City { get; set; } // nvarchar(15)
        [Column, Nullable]
        public string Country { get; set; } // nvarchar(15)
    }

    [Table(Schema = "dbo", Name = "Region")]
    public partial class Region
    {
        [PrimaryKey, NotNull]
        public int RegionID { get; set; } // int
        [Column, NotNull]
        public string RegionDescription { get; set; } // nchar(50)

        #region Associations

        /// <summary>
        /// FK_Territories_Region_BackReference
        /// </summary>
        [Association(ThisKey = "RegionID", OtherKey = "RegionID", CanBeNull = true, IsBackReference = true)]
        public IEnumerable<Territory> Territories { get; set; }

        #endregion
    }

    // View
    [Table(Schema = "dbo", Name = "Sales by Category")]
    public partial class SalesByCategory
    {
        [Column, NotNull]
        public int CategoryID { get; set; } // int
        [Column, NotNull]
        public string CategoryName { get; set; } // nvarchar(15)
        [Column, NotNull]
        public string ProductName { get; set; } // nvarchar(40)
        [Column, Nullable]
        public decimal? ProductSales { get; set; } // money
    }

    // View
    [Table(Schema = "dbo", Name = "Sales Totals by Amount")]
    public partial class SalesTotalsByAmount
    {
        [Column, Nullable]
        public decimal? SaleAmount { get; set; } // money
        [Column, NotNull]
        public int OrderID { get; set; } // int
        [Column, NotNull]
        public string CompanyName { get; set; } // nvarchar(40)
        [Column, Nullable]
        public DateTime? ShippedDate { get; set; } // datetime
    }

    [Table(Schema = "dbo", Name = "Shippers")]
    public partial class Shipper
    {
        [PrimaryKey, Identity]
        public int ShipperID { get; set; } // int
        [Column, NotNull]
        public string CompanyName { get; set; } // nvarchar(40)
        [Column, Nullable]
        public string Phone { get; set; } // nvarchar(24)

        #region Associations

        /// <summary>
        /// FK_Orders_Shippers_BackReference
        /// </summary>
        [Association(ThisKey = "ShipperID", OtherKey = "ShipVia", CanBeNull = true, IsBackReference = true)]
        public IEnumerable<Order> Orders { get; set; }

        #endregion
    }

    // View
    [Table(Schema = "dbo", Name = "Summary of Sales by Quarter")]
    public partial class SummaryOfSalesByQuarter
    {
        [Column, Nullable]
        public DateTime? ShippedDate { get; set; } // datetime
        [Column, NotNull]
        public int OrderID { get; set; } // int
        [Column, Nullable]
        public decimal? Subtotal { get; set; } // money
    }

    // View
    [Table(Schema = "dbo", Name = "Summary of Sales by Year")]
    public partial class SummaryOfSalesByYear
    {
        [Column, Nullable]
        public DateTime? ShippedDate { get; set; } // datetime
        [Column, NotNull]
        public int OrderID { get; set; } // int
        [Column, Nullable]
        public decimal? Subtotal { get; set; } // money
    }

    [Table(Schema = "dbo", Name = "Suppliers")]
    public partial class Supplier
    {
        [PrimaryKey, Identity]
        public int SupplierID { get; set; } // int
        [Column, NotNull]
        public string CompanyName { get; set; } // nvarchar(40)
        [Column, Nullable]
        public string ContactName { get; set; } // nvarchar(30)
        [Column, Nullable]
        public string ContactTitle { get; set; } // nvarchar(30)
        [Column, Nullable]
        public string Address { get; set; } // nvarchar(60)
        [Column, Nullable]
        public string City { get; set; } // nvarchar(15)
        [Column, Nullable]
        public string Region { get; set; } // nvarchar(15)
        [Column, Nullable]
        public string PostalCode { get; set; } // nvarchar(10)
        [Column, Nullable]
        public string Country { get; set; } // nvarchar(15)
        [Column, Nullable]
        public string Phone { get; set; } // nvarchar(24)
        [Column, Nullable]
        public string Fax { get; set; } // nvarchar(24)
        [Column, Nullable]
        public string HomePage { get; set; } // ntext

        #region Associations

        /// <summary>
        /// FK_Products_Suppliers_BackReference
        /// </summary>
        [Association(ThisKey = "SupplierID", OtherKey = "SupplierID", CanBeNull = true, IsBackReference = true)]
        public IEnumerable<Product> Products { get; set; }

        #endregion
    }

    [Table(Schema = "dbo", Name = "Territories")]
    public partial class Territory
    {
        [PrimaryKey, NotNull]
        public string TerritoryID { get; set; } // nvarchar(20)
        [Column, NotNull]
        public string TerritoryDescription { get; set; } // nchar(50)
        [Column, NotNull]
        public int RegionID { get; set; } // int

        #region Associations

        /// <summary>
        /// FK_Territories_Region
        /// </summary>
        [Association(ThisKey = "RegionID", OtherKey = "RegionID", CanBeNull = false, KeyName = "FK_Territories_Region", BackReferenceName = "Territories")]
        public Region Region { get; set; }

        /// <summary>
        /// FK_EmployeeTerritories_Territories_BackReference
        /// </summary>
        [Association(ThisKey = "TerritoryID", OtherKey = "TerritoryID", CanBeNull = true, IsBackReference = true)]
        public IEnumerable<EmployeeTerritory> EmployeeTerritories { get; set; }

        #endregion
    }

    public static partial class NorthwindDBStoredProcedures
    {
        #region CustOrderHist

        public static IEnumerable<CustOrderHistResult> CustOrderHist(this DataConnection dataConnection, string @CustomerID)
        {
            return dataConnection.QueryProc<CustOrderHistResult>("[dbo].[CustOrderHist]",
                new DataParameter("@CustomerID", @CustomerID, DataType.NChar));
        }

        public partial class CustOrderHistResult
        {
            public string ProductName { get; set; }
            public int? Total { get; set; }
        }

        #endregion

        #region CustOrdersDetail

        public static IEnumerable<CustOrdersDetailResult> CustOrdersDetail(this DataConnection dataConnection, int? @OrderID)
        {
            return dataConnection.QueryProc<CustOrdersDetailResult>("[dbo].[CustOrdersDetail]",
                new DataParameter("@OrderID", @OrderID, DataType.Int32));
        }

        public partial class CustOrdersDetailResult
        {
            public string ProductName { get; set; }
            public decimal UnitPrice { get; set; }
            public short Quantity { get; set; }
            public int? Discount { get; set; }
            public decimal? ExtendedPrice { get; set; }
        }

        #endregion

        #region CustOrdersOrders

        public static IEnumerable<CustOrdersOrdersResult> CustOrdersOrders(this DataConnection dataConnection, string @CustomerID)
        {
            return dataConnection.QueryProc<CustOrdersOrdersResult>("[dbo].[CustOrdersOrders]",
                new DataParameter("@CustomerID", @CustomerID, DataType.NChar));
        }

        public partial class CustOrdersOrdersResult
        {
            public int OrderID { get; set; }
            public DateTime? OrderDate { get; set; }
            public DateTime? RequiredDate { get; set; }
            public DateTime? ShippedDate { get; set; }
        }

        #endregion

        #region EmployeeSalesByCountry

        public static IEnumerable<EmployeeSalesByCountryResult> EmployeeSalesByCountry(this DataConnection dataConnection, DateTime? @Beginning_Date, DateTime? @Ending_Date)
        {
            return dataConnection.QueryProc<EmployeeSalesByCountryResult>("[dbo].[Employee Sales by Country]",
                new DataParameter("@Beginning_Date", @Beginning_Date, DataType.DateTime),
                new DataParameter("@Ending_Date", @Ending_Date, DataType.DateTime));
        }

        public partial class EmployeeSalesByCountryResult
        {
            public string Country { get; set; }
            public string LastName { get; set; }
            public string FirstName { get; set; }
            public DateTime? ShippedDate { get; set; }
            public int OrderID { get; set; }
            public decimal? SaleAmount { get; set; }
        }

        #endregion

        #region SalesByYear

        public static IEnumerable<SalesByYearResult> SalesByYear(this DataConnection dataConnection, DateTime? @Beginning_Date, DateTime? @Ending_Date)
        {
            return dataConnection.QueryProc<SalesByYearResult>("[dbo].[Sales by Year]",
                new DataParameter("@Beginning_Date", @Beginning_Date, DataType.DateTime),
                new DataParameter("@Ending_Date", @Ending_Date, DataType.DateTime));
        }

        public partial class SalesByYearResult
        {
            public DateTime? ShippedDate { get; set; }
            public int OrderID { get; set; }
            public decimal? Subtotal { get; set; }
            public string Year { get; set; }
        }

        #endregion

        #region SalesByCategory

        public static IEnumerable<SalesByCategoryResult> SalesByCategory(this DataConnection dataConnection, string @CategoryName, string @OrdYear)
        {
            return dataConnection.QueryProc<SalesByCategoryResult>("[dbo].[SalesByCategory]",
                new DataParameter("@CategoryName", @CategoryName, DataType.NVarChar),
                new DataParameter("@OrdYear", @OrdYear, DataType.NVarChar));
        }

        public partial class SalesByCategoryResult
        {
            public string ProductName { get; set; }
            public decimal? TotalPurchase { get; set; }
        }

        #endregion

        #region TenMostExpensiveProducts

        public static IEnumerable<TenMostExpensiveProductsResult> TenMostExpensiveProducts(this DataConnection dataConnection)
        {
            return dataConnection.QueryProc<TenMostExpensiveProductsResult>("[dbo].[Ten Most Expensive Products]");
        }

        public partial class TenMostExpensiveProductsResult
        {
            public string TenMostExpensiveProducts { get; set; }
            public decimal? UnitPrice { get; set; }
        }

        #endregion
    }

    public static partial class TableExtensions
    {
        public static Category Find(this ITable<Category> table, int CategoryID)
        {
            return table.FirstOrDefault(t =>
                t.CategoryID == CategoryID);
        }

        public static Customer Find(this ITable<Customer> table, string CustomerID)
        {
            return table.FirstOrDefault(t =>
                t.CustomerID == CustomerID);
        }

        public static CustomerCustomerDemo Find(this ITable<CustomerCustomerDemo> table, string CustomerID, string CustomerTypeID)
        {
            return table.FirstOrDefault(t =>
                t.CustomerID == CustomerID &&
                t.CustomerTypeID == CustomerTypeID);
        }

        public static CustomerDemographic Find(this ITable<CustomerDemographic> table, string CustomerTypeID)
        {
            return table.FirstOrDefault(t =>
                t.CustomerTypeID == CustomerTypeID);
        }

        public static Employee Find(this ITable<Employee> table, int EmployeeID)
        {
            return table.FirstOrDefault(t =>
                t.EmployeeID == EmployeeID);
        }

        public static EmployeeTerritory Find(this ITable<EmployeeTerritory> table, int EmployeeID, string TerritoryID)
        {
            return table.FirstOrDefault(t =>
                t.EmployeeID == EmployeeID &&
                t.TerritoryID == TerritoryID);
        }

        public static Order Find(this ITable<Order> table, int OrderID)
        {
            return table.FirstOrDefault(t =>
                t.OrderID == OrderID);
        }

        public static OrderDetail Find(this ITable<OrderDetail> table, int OrderID, int ProductID)
        {
            return table.FirstOrDefault(t =>
                t.OrderID == OrderID &&
                t.ProductID == ProductID);
        }

        public static Product Find(this ITable<Product> table, int ProductID)
        {
            return table.FirstOrDefault(t =>
                t.ProductID == ProductID);
        }

        public static Region Find(this ITable<Region> table, int RegionID)
        {
            return table.FirstOrDefault(t =>
                t.RegionID == RegionID);
        }

        public static Shipper Find(this ITable<Shipper> table, int ShipperID)
        {
            return table.FirstOrDefault(t =>
                t.ShipperID == ShipperID);
        }

        public static Supplier Find(this ITable<Supplier> table, int SupplierID)
        {
            return table.FirstOrDefault(t =>
                t.SupplierID == SupplierID);
        }

        public static Territory Find(this ITable<Territory> table, string TerritoryID)
        {
            return table.FirstOrDefault(t =>
                t.TerritoryID == TerritoryID);
        }
    }
}
